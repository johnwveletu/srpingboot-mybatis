<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
		1、mybatis可以使用properties来引入外部properties配置文件的内容；
		resource：引入类路径下的资源
		url：引入网络路径或者磁盘路径下的资源
	  -->
    <!--<properties resource="db.properties" ></properties>-->

    <settings>
        <!-- Globally enables or disables any caches configured in any mapper under this configuration -->
        <!--<setting name="cacheEnabled" value="true"/>-->
        <!-- Sets the number of seconds the driver will wait for a response from the database -->
        <!--<setting name="defaultStatementTimeout" value="5"/>-->
        <!-- Enables automatic mapping from classic database column names A_COLUMN to camel case classic Java property names aColumn -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- Allows JDBC support for generated keys. A compatible driver is required.
        This setting forces generated keys to be used if set to true,
         as some drivers deny compatibility but still work -->
        <setting name="useGeneratedKeys" value="true"/>
        <!--延迟加载-->
        <!--<setting name="lazyLoadingEnabled" value="true"/>-->
        <!--<setting name="aggressiveLazyLoading" value="false"/>-->
    </settings>

    <!--&lt;!&ndash; 3、typeAliases：别名处理器：可以为我们的java类型起别名-->
			<!--别名不区分大小写-->
	<!--&ndash;&gt;-->
    <!--<typeAliases>-->
        <!--&lt;!&ndash; 1、typeAlias:为某个java类型起别名-->
                <!--type:指定要起别名的类型全类名;默认别名就是类名小写；employee-->
                <!--alias:指定新的别名-->
         <!--&ndash;&gt;-->
        <!--&lt;!&ndash; <typeAlias type="com.atguigu.mybatis.bean.Employee" alias="emp"/> &ndash;&gt;-->

        <!--&lt;!&ndash; 2、package:为某个包下的所有类批量起别名-->
                <!--name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）-->
        <!--&ndash;&gt;-->
        <!--<package name="com.wang.mybatis.beans"/>-->

        <!--&lt;!&ndash; 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 &ndash;&gt;-->
    <!--</typeAliases>-->

    <!--&lt;!&ndash;-->
		<!--4、environments：环境们，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。-->
			<!--environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识-->
				<!--transactionManager：事务管理器；-->
					<!--type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)-->
						<!--自定义事务管理器：实现TransactionFactory接口.type指定为全类名-->

				<!--dataSource：数据源;-->
					<!--type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)-->
								<!--|POOLED(PooledDataSourceFactory)-->
								<!--|JNDI(JndiDataSourceFactory)-->
					<!--自定义数据源：实现DataSourceFactory接口，type是全类名-->
		 <!--&ndash;&gt;-->

    <!--<environments default="mySql">-->
        <!--<environment id="mySql">-->
            <!--<transactionManager type="JDBC"></transactionManager>-->
            <!--<dataSource type="POOLED">-->
                <!--<property name="username" value="${jdbc.username}"></property>-->
                <!--<property name="password" value="${jdbc.password}"></property>-->
                <!--<property name="url" value="${jdbc.jdbcurl}"></property>-->
                <!--<property name="driver" value="${jdbc.driverclass}"></property>-->
            <!--</dataSource>-->
        <!--</environment>-->

        <!--<environment id="oracle">-->
            <!--<transactionManager type="JDBC" />-->
            <!--<dataSource type="POOLED">-->
                <!--&lt;!&ndash;<property name="driver" value="${orcl.driver}" />&ndash;&gt;-->
                <!--&lt;!&ndash;<property name="url" value="${orcl.url}" />&ndash;&gt;-->
                <!--&lt;!&ndash;<property name="username" value="${orcl.username}" />&ndash;&gt;-->
                <!--&lt;!&ndash;<property name="password" value="${orcl.password}" />&ndash;&gt;-->
            <!--</dataSource>-->
        <!--</environment>-->
    <!--</environments>-->

    <!--&lt;!&ndash; 5、databaseIdProvider：支持多数据库厂商的；-->
		 <!--type="DB_VENDOR"：VendorDatabaseIdProvider-->
		 	<!--作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;-->
		 	<!--MySQL，Oracle，SQL Server,xxxx-->
	  <!--&ndash;&gt;-->
    <!--<databaseIdProvider type="DB_VENDOR">-->
        <!--&lt;!&ndash; 为不同的数据库厂商起别名 &ndash;&gt;-->
        <!--<property name="MySQL" value="mysql"/>-->
        <!--<property name="Oracle" value="oracle"/>-->
        <!--<property name="SQL Server" value="sqlserver"/>-->
    <!--</databaseIdProvider>-->

    <!--&lt;!&ndash; 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 &ndash;&gt;-->
    <!--&lt;!&ndash; 6、mappers：将sql映射注册到全局配置中 &ndash;&gt;-->
    <!--<mappers>-->
        <!--&lt;!&ndash;-->
            <!--mapper:注册一个sql映射-->
                <!--注册配置文件-->
                <!--resource：引用类路径下的sql映射文件-->
                    <!--mybatis/mapper/EmployeeMapper.xml-->
                <!--url：引用网路路径或者磁盘路径下的sql映射文件-->
                    <!--file:///var/mappers/AuthorMapper.xml-->

                <!--注册接口-->
                <!--class：引用（注册）接口，-->
                    <!--1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；-->
                    <!--2、没有sql映射文件，所有的sql都是利用注解写在接口上;-->
                    <!--推荐：-->
                        <!--比较重要的，复杂的Dao接口我们来写sql映射文件-->
                        <!--不重要，简单的Dao接口为了开发快速可以使用注解；-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash; <mapper resource="mybatis/mapper/EmployeeMapper.xml"/> &ndash;&gt;-->
        <!--&lt;!&ndash; <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/> &ndash;&gt;-->

        <!--&lt;!&ndash; 批量注册： &ndash;&gt;-->
        <!--<package name="com.wang.mybatis.dao"/>-->
    <!--</mappers>-->

    <!--&lt;!&ndash; Continue editing here &ndash;&gt;-->

</configuration>